@* Local: Views/Ferias/Gestao.cshtml *@
@{
    ViewData["Title"] = "Gestão de Férias";
    Layout = "_LayoutAdmin";
}
<form style="display: none;">@Html.AntiForgeryToken()</form>

@section Styles {
    <style>
        #calendar {
            max-width: 1100px;
            margin: 20px auto;
        }

        .admin-panel {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            padding: 1.5rem;
            border-radius: .3rem;
            margin-top: 2rem;
        }

        .admin-form-row {
            display: flex;
            flex-wrap: wrap;
            gap: 1rem;
            align-items: flex-end;
        }

            .admin-form-row > div {
                flex: 1 1 200px;
            }

        :root {
            --fc-event-bg-color: #0d6efd;
            --fc-event-border-color: #0d6efd;
            --fc-event-text-color: #ffffff;
        }

        .toast-notification {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            padding: 1rem 1.5rem;
            border-radius: .25rem;
            color: #fff;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.5s, visibility 0.5s;
            z-index: 1050;
        }

            .toast-notification.show {
                opacity: 1;
                visibility: visible;
            }

            .toast-notification.success {
                background-color: #28a745;
            }

            .toast-notification.error {
                background-color: #dc3545;
            }

        /* ============== NOVA REGRA DE CSS ADICIONADA AQUI ============== */
        .fc-col-header-cell-cushion {
            color: black;
            text-decoration: none; /* Remove o sublinhado, caso seja um link */
        }
    </style>
}

<div class="content">
    <div class="header"><h2>@ViewData["Title"]</h2></div>

    <div id="ferias-notification" class="toast-notification"></div>

    <p class="text-muted">Visualize o calendário da equipa e utilize o painel abaixo para marcar períodos de férias para toda a empresa.</p>
    <div id='calendar'></div>

    <div class="admin-panel">
        <h4>Marcar Férias para a Empresa</h4>
        <p>Selecione um período para marcar férias para todos os utilizadores. Isto irá descontar os dias úteis correspondentes de cada um.</p>
        <div class="admin-form-row">
            <div>
                <label for="adminDataInicio" class="form-label">Data de Início</label>
                <input type="date" id="adminDataInicio" class="form-control" />
            </div>
            <div>
                <label for="adminDataFim" class="form-label">Data de Fim</label>
                <input type="date" id="adminDataFim" class="form-control" />
            </div>
            <div>
                <button id="btnMarcarEmpresa" class="btn btn-danger w-100">Marcar para Todos</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Referência ao ficheiro do FullCalendar alojado localmente -->
    <script src='~/lib/fullcalendar/index.global.min.js'></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const calendarEl = document.getElementById('calendar');
            const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;
            const btnMarcarEmpresa = document.getElementById('btnMarcarEmpresa');
            const notificationEl = document.getElementById('ferias-notification');

            let notificationTimeout;
            function showNotification(message, type = 'success') {
                clearTimeout(notificationTimeout);
                notificationEl.className = `toast-notification ${type} show`;
                notificationEl.textContent = message;
                notificationTimeout = setTimeout(() => { notificationEl.classList.remove('show'); }, 4000);
            }

            async function fetchWithCreds(url, options = {}) {
                options.credentials = 'same-origin';
                options.headers = { ...options.headers, 'RequestVerificationToken': antiForgeryToken, 'Content-Type': 'application/json' };
                return fetch(url, options);
            }

            const calendar = new FullCalendar.Calendar(calendarEl, {
                headerToolbar: { left: 'prev,next today', center: 'title', right: 'dayGridMonth,listWeek' },
                locale: 'pt',
                events: '/api/ferias/eventos',
                selectable: false // Admins não marcam férias individuais aqui, usam o painel
            });
            calendar.render();

            if (btnMarcarEmpresa) {
                btnMarcarEmpresa.addEventListener('click', async () => {
                    const start = document.getElementById('adminDataInicio').value;
                    const end = document.getElementById('adminDataFim').value;

                    if (!start || !end) {
                        showNotification('Por favor, selecione uma data de início e de fim.', 'error');
                        return;
                    }
                    if (new Date(end) < new Date(start)) {
                        showNotification('A data de fim não pode ser anterior à data de início.', 'error');
                        return;
                    }

                    if (confirm(`Tem a certeza que quer marcar férias para TODA a empresa de ${start} a ${end}? Esta ação não pode ser desfeita.`)) {
                        try {
                            const response = await fetchWithCreds('/api/ferias/admin/marcarempresa', {
                                method: 'POST',
                                body: JSON.stringify({ start: start, end: end })
                            });

                            const result = await response.json();

                            if (response.ok) {
                                showNotification(result.message, 'success');
                                calendar.refetchEvents();
                            } else {
                                showNotification('Erro: ' + result.message, 'error');
                            }
                        } catch (e) {
                            showNotification('Erro de comunicação.', 'error');
                        }
                    }
                });
            }
        });
    </script>
}